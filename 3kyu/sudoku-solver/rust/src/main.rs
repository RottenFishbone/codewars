// https://www.codewars.com/kata/5296bc77afba8baa690002d7
//
// Board solver using AC3 (no backtracking)
// This is overkill for the this kata, however it is groundwork for harder ones.

type ArcSet = [[[(usize, usize); 20]; 9]; 9];
type DomainMap = [[u32; 9]; 9];

#[derive(Debug)]
struct Board {
    domains:        DomainMap,
    worklist:       Vec<(usize, usize)>,
    in_worklist:    [[bool; 9]; 9],
}
impl Board {
    // Value of an unknown domain (possible values of [1-9])
    const UNK: u32 = 0b1_1111_1111;
    
    pub fn new(puzzle: &[[u8; 9]; 9]) -> Self {
        let mut in_worklist: [[bool; 9]; 9] = [[false; 9]; 9];
        let mut worklist: Vec<(usize, usize)> = Vec::new();
        
        // Build a domain set from input board
        let mut domains: DomainMap = DomainMap::default();
        for (y, row) in puzzle.iter().enumerate() {
            for (x, cell) in row.iter().enumerate() {
                domains[y][x] = if *cell == 0 { Self::UNK } 
                              else { 0b1 << (*cell-1) as u32 };
                
                if *cell == 0 {
                    in_worklist[y][x] = true;
                    worklist.push((x, y));
                }
            }
        }

        Self { domains, worklist, in_worklist }
    }

    /// Solves the current board state using AC3
    pub fn solve(&mut self) -> bool {
        let is_valid = self.propagate();
        if !is_valid { panic!("Reached an invalid board state."); }
        else if !self.is_solved() { panic!("Non-determinable input"); }
        
        true
    }

    /// Returns whether the puzzle is solved or not
    pub fn is_solved(&self) -> bool {
        for row in self.domains {
            for cell in row {
                if !Self::is_final(cell) {
                    return false;
                }
            }
        }

        true
    }

    /// Clones the current board state into a 9x9 puzzle array
    pub fn copy_into(&self, puzzle: &mut [[u8; 9]; 9]){
        if !self.is_solved() { return; }

        for (y, row) in self.domains.iter().enumerate() {
            for (x, cell) in row.iter().enumerate() {
                puzzle[y][x] = (cell.trailing_zeros() + 1) as u8;
            }
        }
    }

    /// Runs AC3 until the board reaches arc-consistency
    fn propagate(&mut self) -> bool {
        while self.worklist.len() > 0 {
            let (x, y) = self.worklist.pop().unwrap();
            self.in_worklist[y][x] = false;
            
            // Iterate over all of cur node's arcs and reduce its domain as needed
            for (arc_x, arc_y) in ARC_SET[y][x] {
                let nbr_domain = self.domains[arc_y][arc_x];
                let cur_domain = &mut (self.domains[y][x]);
                // If connected to a final value and the domain allows that value
                if Self::is_final(nbr_domain) && (*cur_domain & nbr_domain) != 0 {
                    // Constrain the domain of cur node
                    *cur_domain &= !nbr_domain;
                    
                    // If we reduced a variable to a final value, add arcs to worklist
                    if Self::is_final(*cur_domain) {
                        for (cur_ax, cur_ay) in ARC_SET[y][x] {
                            // Only add ones that aren't queued
                            if !self.in_worklist[cur_ay][cur_ax] {
                                self.worklist.push((cur_ax, cur_ay));
                                self.in_worklist[cur_ay][cur_ax] = true;
                            }
                        }
                    }
                    // Return false on an invalid state (no solution)
                    else if *cur_domain == 0 { return false; }
                }
            }
        }

        true
    }
    
    #[allow(dead_code)]
    /// Outputs the board state to stdout. Any non-final states will be `.`
    fn pretty_print(&self) {
        for row in self.domains {
            for cell in row {
                print!("{} ", 
                    if Self::is_final(cell) { (cell.trailing_zeros()+1).to_string() } 
                    else { ".".to_string() });
            }
            println!("");
        }
    }

    /// Returns true if a domain has a single value, otherwise false
    #[inline]
    fn is_final(domain: u32) -> bool {
        domain.leading_zeros() + domain.trailing_zeros() == 31
    }
}

fn sudoku(puzzle: &mut [[u8; 9]; 9]) {
    let mut board = Board::new(puzzle);
    board.solve();
    board.copy_into(puzzle);
}




/// A [y][x] indexed array of sudoku arcs. Each cell has 20 arcs (8 local block, 6 row, 6 col).
/// Any change in one cell must be propagated to each coordinate within its arc set
const ARC_SET: ArcSet = [
        [
                [(1, 0), (2, 0), (0, 1), (1, 1), (2, 1), (0, 2), (1, 2), (2, 2), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)],
                [(0, 0), (2, 0), (0, 1), (1, 1), (2, 1), (0, 2), (1, 2), (2, 2), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8)],
                [(0, 0), (1, 0), (0, 1), (1, 1), (2, 1), (0, 2), (1, 2), (2, 2), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8)],
                [(4, 0), (5, 0), (3, 1), (4, 1), (5, 1), (3, 2), (4, 2), (5, 2), (0, 0), (1, 0), (2, 0), (6, 0), (7, 0), (8, 0), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8)],
                [(3, 0), (5, 0), (3, 1), (4, 1), (5, 1), (3, 2), (4, 2), (5, 2), (0, 0), (1, 0), (2, 0), (6, 0), (7, 0), (8, 0), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8)],
                [(3, 0), (4, 0), (3, 1), (4, 1), (5, 1), (3, 2), (4, 2), (5, 2), (0, 0), (1, 0), (2, 0), (6, 0), (7, 0), (8, 0), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8)],
                [(7, 0), (8, 0), (6, 1), (7, 1), (8, 1), (6, 2), (7, 2), (8, 2), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8)],
                [(6, 0), (8, 0), (6, 1), (7, 1), (8, 1), (6, 2), (7, 2), (8, 2), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8)],
                [(6, 0), (7, 0), (6, 1), (7, 1), (8, 1), (6, 2), (7, 2), (8, 2), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)],
        ],
        [
                [(0, 0), (1, 0), (2, 0), (1, 1), (2, 1), (0, 2), (1, 2), (2, 2), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)],
                [(0, 0), (1, 0), (2, 0), (0, 1), (2, 1), (0, 2), (1, 2), (2, 2), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8)],
                [(0, 0), (1, 0), (2, 0), (0, 1), (1, 1), (0, 2), (1, 2), (2, 2), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8)],
                [(3, 0), (4, 0), (5, 0), (4, 1), (5, 1), (3, 2), (4, 2), (5, 2), (0, 1), (1, 1), (2, 1), (6, 1), (7, 1), (8, 1), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8)],
                [(3, 0), (4, 0), (5, 0), (3, 1), (5, 1), (3, 2), (4, 2), (5, 2), (0, 1), (1, 1), (2, 1), (6, 1), (7, 1), (8, 1), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8)],
                [(3, 0), (4, 0), (5, 0), (3, 1), (4, 1), (3, 2), (4, 2), (5, 2), (0, 1), (1, 1), (2, 1), (6, 1), (7, 1), (8, 1), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8)],
                [(6, 0), (7, 0), (8, 0), (7, 1), (8, 1), (6, 2), (7, 2), (8, 2), (0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8)],
                [(6, 0), (7, 0), (8, 0), (6, 1), (8, 1), (6, 2), (7, 2), (8, 2), (0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8)],
                [(6, 0), (7, 0), (8, 0), (6, 1), (7, 1), (6, 2), (7, 2), (8, 2), (0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)],
        ],
        [
                [(0, 0), (1, 0), (2, 0), (0, 1), (1, 1), (2, 1), (1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2), (7, 2), (8, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)],
                [(0, 0), (1, 0), (2, 0), (0, 1), (1, 1), (2, 1), (0, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2), (7, 2), (8, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8)],
                [(0, 0), (1, 0), (2, 0), (0, 1), (1, 1), (2, 1), (0, 2), (1, 2), (3, 2), (4, 2), (5, 2), (6, 2), (7, 2), (8, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8)],
                [(3, 0), (4, 0), (5, 0), (3, 1), (4, 1), (5, 1), (4, 2), (5, 2), (0, 2), (1, 2), (2, 2), (6, 2), (7, 2), (8, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8)],
                [(3, 0), (4, 0), (5, 0), (3, 1), (4, 1), (5, 1), (3, 2), (5, 2), (0, 2), (1, 2), (2, 2), (6, 2), (7, 2), (8, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8)],
                [(3, 0), (4, 0), (5, 0), (3, 1), (4, 1), (5, 1), (3, 2), (4, 2), (0, 2), (1, 2), (2, 2), (6, 2), (7, 2), (8, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8)],
                [(6, 0), (7, 0), (8, 0), (6, 1), (7, 1), (8, 1), (7, 2), (8, 2), (0, 2), (1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8)],
                [(6, 0), (7, 0), (8, 0), (6, 1), (7, 1), (8, 1), (6, 2), (8, 2), (0, 2), (1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8)],
                [(6, 0), (7, 0), (8, 0), (6, 1), (7, 1), (8, 1), (6, 2), (7, 2), (0, 2), (1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)],
        ],
        [
                [(1, 3), (2, 3), (0, 4), (1, 4), (2, 4), (0, 5), (1, 5), (2, 5), (3, 3), (4, 3), (5, 3), (6, 3), (7, 3), (8, 3), (0, 0), (0, 1), (0, 2), (0, 6), (0, 7), (0, 8)],
                [(0, 3), (2, 3), (0, 4), (1, 4), (2, 4), (0, 5), (1, 5), (2, 5), (3, 3), (4, 3), (5, 3), (6, 3), (7, 3), (8, 3), (1, 0), (1, 1), (1, 2), (1, 6), (1, 7), (1, 8)],
                [(0, 3), (1, 3), (0, 4), (1, 4), (2, 4), (0, 5), (1, 5), (2, 5), (3, 3), (4, 3), (5, 3), (6, 3), (7, 3), (8, 3), (2, 0), (2, 1), (2, 2), (2, 6), (2, 7), (2, 8)],
                [(4, 3), (5, 3), (3, 4), (4, 4), (5, 4), (3, 5), (4, 5), (5, 5), (0, 3), (1, 3), (2, 3), (6, 3), (7, 3), (8, 3), (3, 0), (3, 1), (3, 2), (3, 6), (3, 7), (3, 8)],
                [(3, 3), (5, 3), (3, 4), (4, 4), (5, 4), (3, 5), (4, 5), (5, 5), (0, 3), (1, 3), (2, 3), (6, 3), (7, 3), (8, 3), (4, 0), (4, 1), (4, 2), (4, 6), (4, 7), (4, 8)],
                [(3, 3), (4, 3), (3, 4), (4, 4), (5, 4), (3, 5), (4, 5), (5, 5), (0, 3), (1, 3), (2, 3), (6, 3), (7, 3), (8, 3), (5, 0), (5, 1), (5, 2), (5, 6), (5, 7), (5, 8)],
                [(7, 3), (8, 3), (6, 4), (7, 4), (8, 4), (6, 5), (7, 5), (8, 5), (0, 3), (1, 3), (2, 3), (3, 3), (4, 3), (5, 3), (6, 0), (6, 1), (6, 2), (6, 6), (6, 7), (6, 8)],
                [(6, 3), (8, 3), (6, 4), (7, 4), (8, 4), (6, 5), (7, 5), (8, 5), (0, 3), (1, 3), (2, 3), (3, 3), (4, 3), (5, 3), (7, 0), (7, 1), (7, 2), (7, 6), (7, 7), (7, 8)],
                [(6, 3), (7, 3), (6, 4), (7, 4), (8, 4), (6, 5), (7, 5), (8, 5), (0, 3), (1, 3), (2, 3), (3, 3), (4, 3), (5, 3), (8, 0), (8, 1), (8, 2), (8, 6), (8, 7), (8, 8)],
        ],
        [
                [(0, 3), (1, 3), (2, 3), (1, 4), (2, 4), (0, 5), (1, 5), (2, 5), (3, 4), (4, 4), (5, 4), (6, 4), (7, 4), (8, 4), (0, 0), (0, 1), (0, 2), (0, 6), (0, 7), (0, 8)],
                [(0, 3), (1, 3), (2, 3), (0, 4), (2, 4), (0, 5), (1, 5), (2, 5), (3, 4), (4, 4), (5, 4), (6, 4), (7, 4), (8, 4), (1, 0), (1, 1), (1, 2), (1, 6), (1, 7), (1, 8)],
                [(0, 3), (1, 3), (2, 3), (0, 4), (1, 4), (0, 5), (1, 5), (2, 5), (3, 4), (4, 4), (5, 4), (6, 4), (7, 4), (8, 4), (2, 0), (2, 1), (2, 2), (2, 6), (2, 7), (2, 8)],
                [(3, 3), (4, 3), (5, 3), (4, 4), (5, 4), (3, 5), (4, 5), (5, 5), (0, 4), (1, 4), (2, 4), (6, 4), (7, 4), (8, 4), (3, 0), (3, 1), (3, 2), (3, 6), (3, 7), (3, 8)],
                [(3, 3), (4, 3), (5, 3), (3, 4), (5, 4), (3, 5), (4, 5), (5, 5), (0, 4), (1, 4), (2, 4), (6, 4), (7, 4), (8, 4), (4, 0), (4, 1), (4, 2), (4, 6), (4, 7), (4, 8)],
                [(3, 3), (4, 3), (5, 3), (3, 4), (4, 4), (3, 5), (4, 5), (5, 5), (0, 4), (1, 4), (2, 4), (6, 4), (7, 4), (8, 4), (5, 0), (5, 1), (5, 2), (5, 6), (5, 7), (5, 8)],
                [(6, 3), (7, 3), (8, 3), (7, 4), (8, 4), (6, 5), (7, 5), (8, 5), (0, 4), (1, 4), (2, 4), (3, 4), (4, 4), (5, 4), (6, 0), (6, 1), (6, 2), (6, 6), (6, 7), (6, 8)],
                [(6, 3), (7, 3), (8, 3), (6, 4), (8, 4), (6, 5), (7, 5), (8, 5), (0, 4), (1, 4), (2, 4), (3, 4), (4, 4), (5, 4), (7, 0), (7, 1), (7, 2), (7, 6), (7, 7), (7, 8)],
                [(6, 3), (7, 3), (8, 3), (6, 4), (7, 4), (6, 5), (7, 5), (8, 5), (0, 4), (1, 4), (2, 4), (3, 4), (4, 4), (5, 4), (8, 0), (8, 1), (8, 2), (8, 6), (8, 7), (8, 8)],
        ],
        [
                [(0, 3), (1, 3), (2, 3), (0, 4), (1, 4), (2, 4), (1, 5), (2, 5), (3, 5), (4, 5), (5, 5), (6, 5), (7, 5), (8, 5), (0, 0), (0, 1), (0, 2), (0, 6), (0, 7), (0, 8)],
                [(0, 3), (1, 3), (2, 3), (0, 4), (1, 4), (2, 4), (0, 5), (2, 5), (3, 5), (4, 5), (5, 5), (6, 5), (7, 5), (8, 5), (1, 0), (1, 1), (1, 2), (1, 6), (1, 7), (1, 8)],
                [(0, 3), (1, 3), (2, 3), (0, 4), (1, 4), (2, 4), (0, 5), (1, 5), (3, 5), (4, 5), (5, 5), (6, 5), (7, 5), (8, 5), (2, 0), (2, 1), (2, 2), (2, 6), (2, 7), (2, 8)],
                [(3, 3), (4, 3), (5, 3), (3, 4), (4, 4), (5, 4), (4, 5), (5, 5), (0, 5), (1, 5), (2, 5), (6, 5), (7, 5), (8, 5), (3, 0), (3, 1), (3, 2), (3, 6), (3, 7), (3, 8)],
                [(3, 3), (4, 3), (5, 3), (3, 4), (4, 4), (5, 4), (3, 5), (5, 5), (0, 5), (1, 5), (2, 5), (6, 5), (7, 5), (8, 5), (4, 0), (4, 1), (4, 2), (4, 6), (4, 7), (4, 8)],
                [(3, 3), (4, 3), (5, 3), (3, 4), (4, 4), (5, 4), (3, 5), (4, 5), (0, 5), (1, 5), (2, 5), (6, 5), (7, 5), (8, 5), (5, 0), (5, 1), (5, 2), (5, 6), (5, 7), (5, 8)],
                [(6, 3), (7, 3), (8, 3), (6, 4), (7, 4), (8, 4), (7, 5), (8, 5), (0, 5), (1, 5), (2, 5), (3, 5), (4, 5), (5, 5), (6, 0), (6, 1), (6, 2), (6, 6), (6, 7), (6, 8)],
                [(6, 3), (7, 3), (8, 3), (6, 4), (7, 4), (8, 4), (6, 5), (8, 5), (0, 5), (1, 5), (2, 5), (3, 5), (4, 5), (5, 5), (7, 0), (7, 1), (7, 2), (7, 6), (7, 7), (7, 8)],
                [(6, 3), (7, 3), (8, 3), (6, 4), (7, 4), (8, 4), (6, 5), (7, 5), (0, 5), (1, 5), (2, 5), (3, 5), (4, 5), (5, 5), (8, 0), (8, 1), (8, 2), (8, 6), (8, 7), (8, 8)],
        ],
        [
                [(1, 6), (2, 6), (0, 7), (1, 7), (2, 7), (0, 8), (1, 8), (2, 8), (3, 6), (4, 6), (5, 6), (6, 6), (7, 6), (8, 6), (0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5)],
                [(0, 6), (2, 6), (0, 7), (1, 7), (2, 7), (0, 8), (1, 8), (2, 8), (3, 6), (4, 6), (5, 6), (6, 6), (7, 6), (8, 6), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5)],
                [(0, 6), (1, 6), (0, 7), (1, 7), (2, 7), (0, 8), (1, 8), (2, 8), (3, 6), (4, 6), (5, 6), (6, 6), (7, 6), (8, 6), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5)],
                [(4, 6), (5, 6), (3, 7), (4, 7), (5, 7), (3, 8), (4, 8), (5, 8), (0, 6), (1, 6), (2, 6), (6, 6), (7, 6), (8, 6), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5)],
                [(3, 6), (5, 6), (3, 7), (4, 7), (5, 7), (3, 8), (4, 8), (5, 8), (0, 6), (1, 6), (2, 6), (6, 6), (7, 6), (8, 6), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5)],
                [(3, 6), (4, 6), (3, 7), (4, 7), (5, 7), (3, 8), (4, 8), (5, 8), (0, 6), (1, 6), (2, 6), (6, 6), (7, 6), (8, 6), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)],
                [(7, 6), (8, 6), (6, 7), (7, 7), (8, 7), (6, 8), (7, 8), (8, 8), (0, 6), (1, 6), (2, 6), (3, 6), (4, 6), (5, 6), (6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5)],
                [(6, 6), (8, 6), (6, 7), (7, 7), (8, 7), (6, 8), (7, 8), (8, 8), (0, 6), (1, 6), (2, 6), (3, 6), (4, 6), (5, 6), (7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5)],
                [(6, 6), (7, 6), (6, 7), (7, 7), (8, 7), (6, 8), (7, 8), (8, 8), (0, 6), (1, 6), (2, 6), (3, 6), (4, 6), (5, 6), (8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5)],
        ],
        [
                [(0, 6), (1, 6), (2, 6), (1, 7), (2, 7), (0, 8), (1, 8), (2, 8), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5)],
                [(0, 6), (1, 6), (2, 6), (0, 7), (2, 7), (0, 8), (1, 8), (2, 8), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5)],
                [(0, 6), (1, 6), (2, 6), (0, 7), (1, 7), (0, 8), (1, 8), (2, 8), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5)],
                [(3, 6), (4, 6), (5, 6), (4, 7), (5, 7), (3, 8), (4, 8), (5, 8), (0, 7), (1, 7), (2, 7), (6, 7), (7, 7), (8, 7), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5)],
                [(3, 6), (4, 6), (5, 6), (3, 7), (5, 7), (3, 8), (4, 8), (5, 8), (0, 7), (1, 7), (2, 7), (6, 7), (7, 7), (8, 7), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5)],
                [(3, 6), (4, 6), (5, 6), (3, 7), (4, 7), (3, 8), (4, 8), (5, 8), (0, 7), (1, 7), (2, 7), (6, 7), (7, 7), (8, 7), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)],
                [(6, 6), (7, 6), (8, 6), (7, 7), (8, 7), (6, 8), (7, 8), (8, 8), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5)],
                [(6, 6), (7, 6), (8, 6), (6, 7), (8, 7), (6, 8), (7, 8), (8, 8), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5)],
                [(6, 6), (7, 6), (8, 6), (6, 7), (7, 7), (6, 8), (7, 8), (8, 8), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5)],
        ],
        [
                [(0, 6), (1, 6), (2, 6), (0, 7), (1, 7), (2, 7), (1, 8), (2, 8), (3, 8), (4, 8), (5, 8), (6, 8), (7, 8), (8, 8), (0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5)],
                [(0, 6), (1, 6), (2, 6), (0, 7), (1, 7), (2, 7), (0, 8), (2, 8), (3, 8), (4, 8), (5, 8), (6, 8), (7, 8), (8, 8), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5)],
                [(0, 6), (1, 6), (2, 6), (0, 7), (1, 7), (2, 7), (0, 8), (1, 8), (3, 8), (4, 8), (5, 8), (6, 8), (7, 8), (8, 8), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5)],
                [(3, 6), (4, 6), (5, 6), (3, 7), (4, 7), (5, 7), (4, 8), (5, 8), (0, 8), (1, 8), (2, 8), (6, 8), (7, 8), (8, 8), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5)],
                [(3, 6), (4, 6), (5, 6), (3, 7), (4, 7), (5, 7), (3, 8), (5, 8), (0, 8), (1, 8), (2, 8), (6, 8), (7, 8), (8, 8), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5)],
                [(3, 6), (4, 6), (5, 6), (3, 7), (4, 7), (5, 7), (3, 8), (4, 8), (0, 8), (1, 8), (2, 8), (6, 8), (7, 8), (8, 8), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)],
                [(6, 6), (7, 6), (8, 6), (6, 7), (7, 7), (8, 7), (7, 8), (8, 8), (0, 8), (1, 8), (2, 8), (3, 8), (4, 8), (5, 8), (6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5)],
                [(6, 6), (7, 6), (8, 6), (6, 7), (7, 7), (8, 7), (6, 8), (8, 8), (0, 8), (1, 8), (2, 8), (3, 8), (4, 8), (5, 8), (7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5)],
                [(6, 6), (7, 6), (8, 6), (6, 7), (7, 7), (8, 7), (6, 8), (7, 8), (0, 8), (1, 8), (2, 8), (3, 8), (4, 8), (5, 8), (8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5)],
        ],
];


/*  Built ARC_SET using:
 *  --------------------
    let mut arcs = ArcSet::default();
    // Build ArcSet cell by cell
    for y in 0..9 {
        for x in 0..9 {
            let mut count = 0;
            
            // Add the local block
            let (bx, by) = (x/3, y/3);  // Block coords
            let (lx, ly) = (x%3, y%3);  // Coords within block                                        
            for j in 0..3 {
                for i in 0..3 {
                    if i == lx && j == ly { continue; }     // Skip self
                    arcs[y][x][count] = (i,j); 
                    count+=1;
                }
            }
            // Add row (skipping local block)
            for i in 0..9 {
                if i/3 == bx { continue; }
                arcs[y][x][count] = (i,y); 
                count+=1;
            }
            // Add col (skipping local block)
            for i in 0..9 {
                if i/3 == by { continue; }
                arcs[y][x][count] = (x,i); 
                count+=1;
            }
        }
    }
*/

fn main() {
    let mut test = [
        [ 5,3,0, 0,7,0, 0,0,0 ],
        [ 6,0,0, 1,9,5, 0,0,0 ],
        [ 0,9,8, 0,0,0, 0,6,0 ],

        [ 8,0,0, 0,6,0, 0,0,3 ],
        [ 4,0,0, 8,0,3, 0,0,1 ],
        [ 7,0,0, 0,2,0, 0,0,6 ],
        
        [ 0,6,0, 0,0,0, 2,8,0 ],
        [ 0,0,0, 4,1,9, 0,0,5 ],
        [ 0,0,0, 0,8,0, 0,7,9 ],
    ];

    sudoku(&mut test);
}
